#ifndef DSPFILTER_H
#define DSPFILTER_H

#include "settings.h"

#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>
/*
 * Note: The code below is automatically generated by the Teensy Audio Design tool
 * at https://www.pjrc.com/teensy/gui/index.html - while it can be edited by hand 
 * the tool can re-import the code.
 */

#ifdef AUDIO_SHIELD
//---------------------------------------------------------------------------------
// GUItool: begin automatically generated code
AudioInputUSB            audioInPC;      //xy=69.19999694824219,194.1999969482422
AudioInputI2S            audioInput;     //xy=73.19999694824219,132.1999969482422
AudioMixer4              monoMixer;      //xy=281.1999969482422,146.1999969482422
AudioFilterFIR           myFilter1;      //xy=555.1999969482422,236.1999969482422
AudioAnalyzePeak         audioInputPeak; //xy=687.1999969482422,102.19999694824219
AudioOutputI2S           audioOutput;    //xy=1040.1999969482422,189.1999969482422
AudioOutputUSB           audioOutPC;     //xy=1041.1999969482422,245.1999969482422
AudioConnection          patchCord1(audioInPC, 0, monoMixer, 2);
AudioConnection          patchCord2(audioInPC, 1, monoMixer, 3);
AudioConnection          patchCord3(audioInput, 0, monoMixer, 0);
AudioConnection          patchCord4(audioInput, 1, monoMixer, 1);
AudioConnection          patchCord5(monoMixer, audioInputPeak);
AudioConnection          patchCord6(monoMixer, myFilter1);
AudioConnection          patchCord7(myFilter1, 0, audioOutput, 0);
AudioConnection          patchCord8(myFilter1, 0, audioOutput, 1);
AudioConnection          patchCord9(myFilter1, 0, audioOutPC, 0);
AudioConnection          patchCord10(myFilter1, 0, audioOutPC, 1);
AudioControlSGTL5000     audioControl;   //xy=284.1999969482422,288.1999969482422
// GUItool: end automatically generated code


//---------------------------------------------------------------------------------
#else
//---------------------------------------------------------------------------------
// GUItool: begin automatically generated code
AudioInputUSB            inPC;           //xy=451.3999938964844,308
AudioInputAnalog         audioInput;     //xy=454.3999938964844,149
AudioMixer4              audioOutputMixer; //xy=1078.3999938964844,251
AudioFilterFIR           myFilter1;      //xy=1280.3999938964844,252
AudioAnalyzePeak         audioInputPeak; //xy=1300.4000244140625,146
AudioOutputUSB           outPC;          //xy=1488.3999938964844,291
AudioOutputAnalog        audioOutput;    //xy=1499.3999938964844,197
AudioConnection          patchCord1(inPC, 0, audioOutputMixer, 2);
AudioConnection          patchCord2(inPC, 1, audioOutputMixer, 3);
AudioConnection          patchCord3(audioInput, 0, audioOutputMixer, 0);
AudioConnection          patchCord4(audioOutputMixer, myFilter1);
AudioConnection          patchCord5(audioOutputMixer, audioInputPeak);
AudioConnection          patchCord6(myFilter1, audioOutput);
AudioConnection          patchCord7(myFilter1, 0, outPC, 0);
AudioConnection          patchCord8(myFilter1, 0, outPC, 1);
// GUItool: end automatically generated code


//---------------------------------------------------------------------------------

#endif

// User defined filters ID's
#define PASSTHRU    0
#define MORSE       1
#define SSB         2
#define LOW_PASS    3
#define HI_PASS     4


// Single filter structure
struct filter {
  const short int     filterID;
  const short int     filterType;
  double              freqLow;
  double              freqHigh;
  const short int     window;                       // Windows included are Blackman, Hanning, and Hamming
  const short int     coeff;
  const char*         desc;
};

/*
 *   Structure to hold the required filters (Add, delete or modify as required) 
 *   
 *   ID,      FilterType,   Low Freq,      Hi Freq,    Window,  FilterName  
 */  
struct filter filterList[] = {
  {MORSE,       ID_BANDPASS,  450.0,    950.0, W_HAMMING,  NUM_COEFFICIENTS, "Morse"},
  {SSB,         ID_BANDPASS,  300.0,   2700.0, W_HAMMING,  NUM_COEFFICIENTS, "SSB"},
  {LOW_PASS,    ID_LOWPASS,  1000.0,      0.0, W_HAMMING,  NUM_COEFFICIENTS, "Low Pass"},
  {HI_PASS,     ID_HIGHPASS, 1000.0,      0.0, W_HAMMING,  NUM_COEFFICIENTS, "High Pass"},
  {PASSTHRU,    ID_BANDPASS,   60.0,   3000.0, W_HAMMING,  NUM_COEFFICIENTS, "Bypass"}
};

unsigned int filterIndex = 0;                 // index to currently selected filter above

short   fir_active1[200];                      // 1st DSP filter array holding the coefficient as 32bit (short)

/* 
 *  These define the Teensy Audio Shield interface
 */
 

#endif
